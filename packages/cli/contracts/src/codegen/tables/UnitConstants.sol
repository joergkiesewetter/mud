// SPDX-License-Identifier: MIT
pragma solidity >=0.8.24;

/* Autogenerated file. Do not edit manually. */

// Import store internals
import { IStore } from "@latticexyz/store/src/IStore.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";
import { StoreCore } from "@latticexyz/store/src/StoreCore.sol";
import { Bytes } from "@latticexyz/store/src/Bytes.sol";
import { Memory } from "@latticexyz/store/src/Memory.sol";
import { SliceLib } from "@latticexyz/store/src/Slice.sol";
import { EncodeArray } from "@latticexyz/store/src/tightcoder/EncodeArray.sol";
import { FieldLayout } from "@latticexyz/store/src/FieldLayout.sol";
import { Schema } from "@latticexyz/store/src/Schema.sol";
import { EncodedLengths, EncodedLengthsLib } from "@latticexyz/store/src/EncodedLengths.sol";
import { ResourceId } from "@latticexyz/store/src/ResourceId.sol";

struct UnitConstantsData {
  int32 hp;
  int32 mana;
  int32 castMana;
  int32 maxMana;
  int32 meleeDamage;
  int32 rangeDamage;
  int32 critDamage;
  uint32 critChance;
  int32 gateDamage;
  uint32 attackRange;
  uint256 cost;
  int32 skillModifier;
}

library UnitConstants {
  // Hex below is the result of `WorldResourceIdLib.encode({ namespace: "", name: "UnitConstants", typeId: RESOURCE_TABLE });`
  ResourceId constant _tableId = ResourceId.wrap(0x74620000000000000000000000000000556e6974436f6e7374616e7473000000);

  FieldLayout constant _fieldLayout =
    FieldLayout.wrap(0x004c0c0004040404040404040404200400000000000000000000000000000000);

  // Hex-encoded key schema of (bytes32)
  Schema constant _keySchema = Schema.wrap(0x002001005f000000000000000000000000000000000000000000000000000000);
  // Hex-encoded value schema of (int32, int32, int32, int32, int32, int32, int32, uint32, int32, uint32, uint256, int32)
  Schema constant _valueSchema = Schema.wrap(0x004c0c00232323232323230323031f2300000000000000000000000000000000);

  /**
   * @notice Get the table's key field names.
   * @return keyNames An array of strings with the names of key fields.
   */
  function getKeyNames() internal pure returns (string[] memory keyNames) {
    keyNames = new string[](1);
    keyNames[0] = "unitType";
  }

  /**
   * @notice Get the table's value field names.
   * @return fieldNames An array of strings with the names of value fields.
   */
  function getFieldNames() internal pure returns (string[] memory fieldNames) {
    fieldNames = new string[](12);
    fieldNames[0] = "hp";
    fieldNames[1] = "mana";
    fieldNames[2] = "castMana";
    fieldNames[3] = "maxMana";
    fieldNames[4] = "meleeDamage";
    fieldNames[5] = "rangeDamage";
    fieldNames[6] = "critDamage";
    fieldNames[7] = "critChance";
    fieldNames[8] = "gateDamage";
    fieldNames[9] = "attackRange";
    fieldNames[10] = "cost";
    fieldNames[11] = "skillModifier";
  }

  /**
   * @notice Register the table with its config.
   */
  function register() internal {
    StoreSwitch.registerTable(_tableId, _fieldLayout, _keySchema, _valueSchema, getKeyNames(), getFieldNames());
  }

  /**
   * @notice Register the table with its config.
   */
  function _register() internal {
    StoreCore.registerTable(_tableId, _fieldLayout, _keySchema, _valueSchema, getKeyNames(), getFieldNames());
  }

  /**
   * @notice Get hp.
   */
  function getHp(bytes32 unitType) internal view returns (int32 hp) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = unitType;

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 0, _fieldLayout);
    return (int32(uint32(bytes4(_blob))));
  }

  /**
   * @notice Get hp.
   */
  function _getHp(bytes32 unitType) internal view returns (int32 hp) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = unitType;

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 0, _fieldLayout);
    return (int32(uint32(bytes4(_blob))));
  }

  /**
   * @notice Set hp.
   */
  function setHp(bytes32 unitType, int32 hp) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = unitType;

    StoreSwitch.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked((hp)), _fieldLayout);
  }

  /**
   * @notice Set hp.
   */
  function _setHp(bytes32 unitType, int32 hp) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = unitType;

    StoreCore.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked((hp)), _fieldLayout);
  }

  /**
   * @notice Get mana.
   */
  function getMana(bytes32 unitType) internal view returns (int32 mana) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = unitType;

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 1, _fieldLayout);
    return (int32(uint32(bytes4(_blob))));
  }

  /**
   * @notice Get mana.
   */
  function _getMana(bytes32 unitType) internal view returns (int32 mana) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = unitType;

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 1, _fieldLayout);
    return (int32(uint32(bytes4(_blob))));
  }

  /**
   * @notice Set mana.
   */
  function setMana(bytes32 unitType, int32 mana) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = unitType;

    StoreSwitch.setStaticField(_tableId, _keyTuple, 1, abi.encodePacked((mana)), _fieldLayout);
  }

  /**
   * @notice Set mana.
   */
  function _setMana(bytes32 unitType, int32 mana) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = unitType;

    StoreCore.setStaticField(_tableId, _keyTuple, 1, abi.encodePacked((mana)), _fieldLayout);
  }

  /**
   * @notice Get castMana.
   */
  function getCastMana(bytes32 unitType) internal view returns (int32 castMana) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = unitType;

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 2, _fieldLayout);
    return (int32(uint32(bytes4(_blob))));
  }

  /**
   * @notice Get castMana.
   */
  function _getCastMana(bytes32 unitType) internal view returns (int32 castMana) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = unitType;

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 2, _fieldLayout);
    return (int32(uint32(bytes4(_blob))));
  }

  /**
   * @notice Set castMana.
   */
  function setCastMana(bytes32 unitType, int32 castMana) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = unitType;

    StoreSwitch.setStaticField(_tableId, _keyTuple, 2, abi.encodePacked((castMana)), _fieldLayout);
  }

  /**
   * @notice Set castMana.
   */
  function _setCastMana(bytes32 unitType, int32 castMana) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = unitType;

    StoreCore.setStaticField(_tableId, _keyTuple, 2, abi.encodePacked((castMana)), _fieldLayout);
  }

  /**
   * @notice Get maxMana.
   */
  function getMaxMana(bytes32 unitType) internal view returns (int32 maxMana) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = unitType;

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 3, _fieldLayout);
    return (int32(uint32(bytes4(_blob))));
  }

  /**
   * @notice Get maxMana.
   */
  function _getMaxMana(bytes32 unitType) internal view returns (int32 maxMana) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = unitType;

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 3, _fieldLayout);
    return (int32(uint32(bytes4(_blob))));
  }

  /**
   * @notice Set maxMana.
   */
  function setMaxMana(bytes32 unitType, int32 maxMana) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = unitType;

    StoreSwitch.setStaticField(_tableId, _keyTuple, 3, abi.encodePacked((maxMana)), _fieldLayout);
  }

  /**
   * @notice Set maxMana.
   */
  function _setMaxMana(bytes32 unitType, int32 maxMana) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = unitType;

    StoreCore.setStaticField(_tableId, _keyTuple, 3, abi.encodePacked((maxMana)), _fieldLayout);
  }

  /**
   * @notice Get meleeDamage.
   */
  function getMeleeDamage(bytes32 unitType) internal view returns (int32 meleeDamage) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = unitType;

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 4, _fieldLayout);
    return (int32(uint32(bytes4(_blob))));
  }

  /**
   * @notice Get meleeDamage.
   */
  function _getMeleeDamage(bytes32 unitType) internal view returns (int32 meleeDamage) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = unitType;

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 4, _fieldLayout);
    return (int32(uint32(bytes4(_blob))));
  }

  /**
   * @notice Set meleeDamage.
   */
  function setMeleeDamage(bytes32 unitType, int32 meleeDamage) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = unitType;

    StoreSwitch.setStaticField(_tableId, _keyTuple, 4, abi.encodePacked((meleeDamage)), _fieldLayout);
  }

  /**
   * @notice Set meleeDamage.
   */
  function _setMeleeDamage(bytes32 unitType, int32 meleeDamage) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = unitType;

    StoreCore.setStaticField(_tableId, _keyTuple, 4, abi.encodePacked((meleeDamage)), _fieldLayout);
  }

  /**
   * @notice Get rangeDamage.
   */
  function getRangeDamage(bytes32 unitType) internal view returns (int32 rangeDamage) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = unitType;

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 5, _fieldLayout);
    return (int32(uint32(bytes4(_blob))));
  }

  /**
   * @notice Get rangeDamage.
   */
  function _getRangeDamage(bytes32 unitType) internal view returns (int32 rangeDamage) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = unitType;

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 5, _fieldLayout);
    return (int32(uint32(bytes4(_blob))));
  }

  /**
   * @notice Set rangeDamage.
   */
  function setRangeDamage(bytes32 unitType, int32 rangeDamage) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = unitType;

    StoreSwitch.setStaticField(_tableId, _keyTuple, 5, abi.encodePacked((rangeDamage)), _fieldLayout);
  }

  /**
   * @notice Set rangeDamage.
   */
  function _setRangeDamage(bytes32 unitType, int32 rangeDamage) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = unitType;

    StoreCore.setStaticField(_tableId, _keyTuple, 5, abi.encodePacked((rangeDamage)), _fieldLayout);
  }

  /**
   * @notice Get critDamage.
   */
  function getCritDamage(bytes32 unitType) internal view returns (int32 critDamage) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = unitType;

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 6, _fieldLayout);
    return (int32(uint32(bytes4(_blob))));
  }

  /**
   * @notice Get critDamage.
   */
  function _getCritDamage(bytes32 unitType) internal view returns (int32 critDamage) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = unitType;

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 6, _fieldLayout);
    return (int32(uint32(bytes4(_blob))));
  }

  /**
   * @notice Set critDamage.
   */
  function setCritDamage(bytes32 unitType, int32 critDamage) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = unitType;

    StoreSwitch.setStaticField(_tableId, _keyTuple, 6, abi.encodePacked((critDamage)), _fieldLayout);
  }

  /**
   * @notice Set critDamage.
   */
  function _setCritDamage(bytes32 unitType, int32 critDamage) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = unitType;

    StoreCore.setStaticField(_tableId, _keyTuple, 6, abi.encodePacked((critDamage)), _fieldLayout);
  }

  /**
   * @notice Get critChance.
   */
  function getCritChance(bytes32 unitType) internal view returns (uint32 critChance) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = unitType;

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 7, _fieldLayout);
    return (uint32(bytes4(_blob)));
  }

  /**
   * @notice Get critChance.
   */
  function _getCritChance(bytes32 unitType) internal view returns (uint32 critChance) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = unitType;

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 7, _fieldLayout);
    return (uint32(bytes4(_blob)));
  }

  /**
   * @notice Set critChance.
   */
  function setCritChance(bytes32 unitType, uint32 critChance) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = unitType;

    StoreSwitch.setStaticField(_tableId, _keyTuple, 7, abi.encodePacked((critChance)), _fieldLayout);
  }

  /**
   * @notice Set critChance.
   */
  function _setCritChance(bytes32 unitType, uint32 critChance) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = unitType;

    StoreCore.setStaticField(_tableId, _keyTuple, 7, abi.encodePacked((critChance)), _fieldLayout);
  }

  /**
   * @notice Get gateDamage.
   */
  function getGateDamage(bytes32 unitType) internal view returns (int32 gateDamage) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = unitType;

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 8, _fieldLayout);
    return (int32(uint32(bytes4(_blob))));
  }

  /**
   * @notice Get gateDamage.
   */
  function _getGateDamage(bytes32 unitType) internal view returns (int32 gateDamage) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = unitType;

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 8, _fieldLayout);
    return (int32(uint32(bytes4(_blob))));
  }

  /**
   * @notice Set gateDamage.
   */
  function setGateDamage(bytes32 unitType, int32 gateDamage) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = unitType;

    StoreSwitch.setStaticField(_tableId, _keyTuple, 8, abi.encodePacked((gateDamage)), _fieldLayout);
  }

  /**
   * @notice Set gateDamage.
   */
  function _setGateDamage(bytes32 unitType, int32 gateDamage) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = unitType;

    StoreCore.setStaticField(_tableId, _keyTuple, 8, abi.encodePacked((gateDamage)), _fieldLayout);
  }

  /**
   * @notice Get attackRange.
   */
  function getAttackRange(bytes32 unitType) internal view returns (uint32 attackRange) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = unitType;

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 9, _fieldLayout);
    return (uint32(bytes4(_blob)));
  }

  /**
   * @notice Get attackRange.
   */
  function _getAttackRange(bytes32 unitType) internal view returns (uint32 attackRange) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = unitType;

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 9, _fieldLayout);
    return (uint32(bytes4(_blob)));
  }

  /**
   * @notice Set attackRange.
   */
  function setAttackRange(bytes32 unitType, uint32 attackRange) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = unitType;

    StoreSwitch.setStaticField(_tableId, _keyTuple, 9, abi.encodePacked((attackRange)), _fieldLayout);
  }

  /**
   * @notice Set attackRange.
   */
  function _setAttackRange(bytes32 unitType, uint32 attackRange) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = unitType;

    StoreCore.setStaticField(_tableId, _keyTuple, 9, abi.encodePacked((attackRange)), _fieldLayout);
  }

  /**
   * @notice Get cost.
   */
  function getCost(bytes32 unitType) internal view returns (uint256 cost) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = unitType;

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 10, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Get cost.
   */
  function _getCost(bytes32 unitType) internal view returns (uint256 cost) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = unitType;

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 10, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Set cost.
   */
  function setCost(bytes32 unitType, uint256 cost) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = unitType;

    StoreSwitch.setStaticField(_tableId, _keyTuple, 10, abi.encodePacked((cost)), _fieldLayout);
  }

  /**
   * @notice Set cost.
   */
  function _setCost(bytes32 unitType, uint256 cost) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = unitType;

    StoreCore.setStaticField(_tableId, _keyTuple, 10, abi.encodePacked((cost)), _fieldLayout);
  }

  /**
   * @notice Get skillModifier.
   */
  function getSkillModifier(bytes32 unitType) internal view returns (int32 skillModifier) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = unitType;

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 11, _fieldLayout);
    return (int32(uint32(bytes4(_blob))));
  }

  /**
   * @notice Get skillModifier.
   */
  function _getSkillModifier(bytes32 unitType) internal view returns (int32 skillModifier) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = unitType;

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 11, _fieldLayout);
    return (int32(uint32(bytes4(_blob))));
  }

  /**
   * @notice Set skillModifier.
   */
  function setSkillModifier(bytes32 unitType, int32 skillModifier) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = unitType;

    StoreSwitch.setStaticField(_tableId, _keyTuple, 11, abi.encodePacked((skillModifier)), _fieldLayout);
  }

  /**
   * @notice Set skillModifier.
   */
  function _setSkillModifier(bytes32 unitType, int32 skillModifier) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = unitType;

    StoreCore.setStaticField(_tableId, _keyTuple, 11, abi.encodePacked((skillModifier)), _fieldLayout);
  }

  /**
   * @notice Get the full data.
   */
  function get(bytes32 unitType) internal view returns (UnitConstantsData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = unitType;

    (bytes memory _staticData, EncodedLengths _encodedLengths, bytes memory _dynamicData) = StoreSwitch.getRecord(
      _tableId,
      _keyTuple,
      _fieldLayout
    );
    return decode(_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Get the full data.
   */
  function _get(bytes32 unitType) internal view returns (UnitConstantsData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = unitType;

    (bytes memory _staticData, EncodedLengths _encodedLengths, bytes memory _dynamicData) = StoreCore.getRecord(
      _tableId,
      _keyTuple,
      _fieldLayout
    );
    return decode(_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function set(
    bytes32 unitType,
    int32 hp,
    int32 mana,
    int32 castMana,
    int32 maxMana,
    int32 meleeDamage,
    int32 rangeDamage,
    int32 critDamage,
    uint32 critChance,
    int32 gateDamage,
    uint32 attackRange,
    uint256 cost,
    int32 skillModifier
  ) internal {
    bytes memory _staticData = encodeStatic(
      hp,
      mana,
      castMana,
      maxMana,
      meleeDamage,
      rangeDamage,
      critDamage,
      critChance,
      gateDamage,
      attackRange,
      cost,
      skillModifier
    );

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = unitType;

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function _set(
    bytes32 unitType,
    int32 hp,
    int32 mana,
    int32 castMana,
    int32 maxMana,
    int32 meleeDamage,
    int32 rangeDamage,
    int32 critDamage,
    uint32 critChance,
    int32 gateDamage,
    uint32 attackRange,
    uint256 cost,
    int32 skillModifier
  ) internal {
    bytes memory _staticData = encodeStatic(
      hp,
      mana,
      castMana,
      maxMana,
      meleeDamage,
      rangeDamage,
      critDamage,
      critChance,
      gateDamage,
      attackRange,
      cost,
      skillModifier
    );

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = unitType;

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /**
   * @notice Set the full data using the data struct.
   */
  function set(bytes32 unitType, UnitConstantsData memory _table) internal {
    bytes memory _staticData = encodeStatic(
      _table.hp,
      _table.mana,
      _table.castMana,
      _table.maxMana,
      _table.meleeDamage,
      _table.rangeDamage,
      _table.critDamage,
      _table.critChance,
      _table.gateDamage,
      _table.attackRange,
      _table.cost,
      _table.skillModifier
    );

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = unitType;

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using the data struct.
   */
  function _set(bytes32 unitType, UnitConstantsData memory _table) internal {
    bytes memory _staticData = encodeStatic(
      _table.hp,
      _table.mana,
      _table.castMana,
      _table.maxMana,
      _table.meleeDamage,
      _table.rangeDamage,
      _table.critDamage,
      _table.critChance,
      _table.gateDamage,
      _table.attackRange,
      _table.cost,
      _table.skillModifier
    );

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = unitType;

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /**
   * @notice Decode the tightly packed blob of static data using this table's field layout.
   */
  function decodeStatic(
    bytes memory _blob
  )
    internal
    pure
    returns (
      int32 hp,
      int32 mana,
      int32 castMana,
      int32 maxMana,
      int32 meleeDamage,
      int32 rangeDamage,
      int32 critDamage,
      uint32 critChance,
      int32 gateDamage,
      uint32 attackRange,
      uint256 cost,
      int32 skillModifier
    )
  {
    hp = (int32(uint32(Bytes.getBytes4(_blob, 0))));

    mana = (int32(uint32(Bytes.getBytes4(_blob, 4))));

    castMana = (int32(uint32(Bytes.getBytes4(_blob, 8))));

    maxMana = (int32(uint32(Bytes.getBytes4(_blob, 12))));

    meleeDamage = (int32(uint32(Bytes.getBytes4(_blob, 16))));

    rangeDamage = (int32(uint32(Bytes.getBytes4(_blob, 20))));

    critDamage = (int32(uint32(Bytes.getBytes4(_blob, 24))));

    critChance = (uint32(Bytes.getBytes4(_blob, 28)));

    gateDamage = (int32(uint32(Bytes.getBytes4(_blob, 32))));

    attackRange = (uint32(Bytes.getBytes4(_blob, 36)));

    cost = (uint256(Bytes.getBytes32(_blob, 40)));

    skillModifier = (int32(uint32(Bytes.getBytes4(_blob, 72))));
  }

  /**
   * @notice Decode the tightly packed blobs using this table's field layout.
   * @param _staticData Tightly packed static fields.
   *
   *
   */
  function decode(
    bytes memory _staticData,
    EncodedLengths,
    bytes memory
  ) internal pure returns (UnitConstantsData memory _table) {
    (
      _table.hp,
      _table.mana,
      _table.castMana,
      _table.maxMana,
      _table.meleeDamage,
      _table.rangeDamage,
      _table.critDamage,
      _table.critChance,
      _table.gateDamage,
      _table.attackRange,
      _table.cost,
      _table.skillModifier
    ) = decodeStatic(_staticData);
  }

  /**
   * @notice Delete all data for given keys.
   */
  function deleteRecord(bytes32 unitType) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = unitType;

    StoreSwitch.deleteRecord(_tableId, _keyTuple);
  }

  /**
   * @notice Delete all data for given keys.
   */
  function _deleteRecord(bytes32 unitType) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = unitType;

    StoreCore.deleteRecord(_tableId, _keyTuple, _fieldLayout);
  }

  /**
   * @notice Tightly pack static (fixed length) data using this table's schema.
   * @return The static data, encoded into a sequence of bytes.
   */
  function encodeStatic(
    int32 hp,
    int32 mana,
    int32 castMana,
    int32 maxMana,
    int32 meleeDamage,
    int32 rangeDamage,
    int32 critDamage,
    uint32 critChance,
    int32 gateDamage,
    uint32 attackRange,
    uint256 cost,
    int32 skillModifier
  ) internal pure returns (bytes memory) {
    return
      abi.encodePacked(
        hp,
        mana,
        castMana,
        maxMana,
        meleeDamage,
        rangeDamage,
        critDamage,
        critChance,
        gateDamage,
        attackRange,
        cost,
        skillModifier
      );
  }

  /**
   * @notice Encode all of a record's fields.
   * @return The static (fixed length) data, encoded into a sequence of bytes.
   * @return The lengths of the dynamic fields (packed into a single bytes32 value).
   * @return The dynamic (variable length) data, encoded into a sequence of bytes.
   */
  function encode(
    int32 hp,
    int32 mana,
    int32 castMana,
    int32 maxMana,
    int32 meleeDamage,
    int32 rangeDamage,
    int32 critDamage,
    uint32 critChance,
    int32 gateDamage,
    uint32 attackRange,
    uint256 cost,
    int32 skillModifier
  ) internal pure returns (bytes memory, EncodedLengths, bytes memory) {
    bytes memory _staticData = encodeStatic(
      hp,
      mana,
      castMana,
      maxMana,
      meleeDamage,
      rangeDamage,
      critDamage,
      critChance,
      gateDamage,
      attackRange,
      cost,
      skillModifier
    );

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    return (_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Encode keys as a bytes32 array using this table's field layout.
   */
  function encodeKeyTuple(bytes32 unitType) internal pure returns (bytes32[] memory) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = unitType;

    return _keyTuple;
  }
}
